#!/usr/bin/env node

const fs = require('fs');
const childProcess = require('child_process');
const readline = require('readline');
const os = require('os');
const tmpDir = os.tmpdir();

const createIoSource = `
function createIo(rl) {
    return {
        fwrite: function(fd, content) {
            this.send(fs.writeSync(fd, content));
        },
        fread: function(fd) {
            this.send(fs.readFileSync(fd).toString());
        },
        fopen: function(filename, flags) {
            try {
                this.send(fs.openSync(filename, flags));
            } catch (e) {
                this.send(e.toString());
            }
        },
        fstat: function(filename) {
            try {
                this.send(fs.statSync(filename));
            } catch (e) {
                this.send(e.toString());
            }
        },
        readdir: function(dirname) {
            try {
                var r = fs.readdirSync(dirname, { withFileTypes: true })
                    .map(dirent => ({
                        name: dirent.name,
                        isDir: dirent.isDirectory(),
                        isFile: dirent.isFile(),
                        isSocket: dirent.isSocket(),
                        isFifo: dirent.isFIFO(),
                        isSymlink: dirent.isSymbolicLink(),
                        isBlockDevice: dirent.isBlockDevice(),
                        isCharacterDevice: dirent.isCharacterDevice(),
                    }));
                this.send(r);
            } catch (e) {
                this.send(e.toString());
            }
        },
        sleep: function(delay) {
            setTimeout(this.send, delay);
        },
        exit: function(status) {
            rl.close();
            process.exit(status);
        }
    }
}
`;
eval(createIoSource);

const args = parseArgs(process.argv.slice(2));

switch (args.cmd) {
    case 'make':
        var jsFile = compileProgram(args);
        var sourceCode = wrapCliProgram(jsFile);
        fs.writeFileSync(args.dst, sourceCode, { mode: 0o755 });

        fs.unlinkSync(jsFile);
        process.exit(255);
        break;

    case 'run':
        var jsFile = compileProgram(args);
        var elmApp = requireElmApp(args, jsFile);
        fs.unlinkSync(jsFile);
        start(elmApp, args.flags);
        break;

    default:
        printBugReport(`Unknown cmd: ${args.cmd}`);
        process.exit(255);
}


function start(elmApp, flags) {
    const rl = readline.createInterface({
      input: process.stdin,
      output: process.stdout
    });
    const io = createIo(rl);
    const app = elmApp.init({ flags: flags });

    app.ports.send.subscribe(function(msg) {
        const fn = io[msg.fn];

        if (!fn) {
            printBugReport(`IO Function "${msg.fn}" not implemented.`);
            process.exit(255);
        }

        fn.apply(app.ports.recv, msg.args);
    });
}

function parseArgs(argsList) {
    var action = argsList.shift();
    var options = {
        debug: false,
    };

    while (arg = argsList.shift()) {
        if (arg == '--debug') {
            options.debug = true;
            continue;
        }
        argsList.unshift(arg);
        break;
    }

    if (!action) {
        exitUserError();
    }

    switch (action) {
        case 'make':
            if (argsList.length !== 2) {
                exitUserError('Wrong number of arguments.');
            }
            return {
                cmd: 'make',
                opt: options,
                src: argsList[0],
                dst: argsList[1],
            };
            break;

        case 'run':
            if (argsList.length < 1) {
                exitUserError('Wrong number of arguments.');
            }
            return {
                cmd: 'run',
                opt: options,
                src: argsList[0],
                flags: {
                    argv: argsList,
                    pid: process.pid,
                    env: process.env
                }
            }
            break;

        default:
            exitUserError(`Unknown command: ${action}`);
    }
}

function exitUserError(msg) {
    if (msg) {
        console.error(msg);
    } else {
        printUsageHelp();
    }
    process.exit(255);
}

function printUsageHelp() {
    console.log(`
Usage: elm-cli ACTION [OPTION] FILE [ARGS]

ACTION:
  make    Compile the program to a stand alone js file.
          Example: elm-cli make src/MyProgram.elm dest/my-program.js

  run     Run the program.
          Example: elm-cli run src/MyProgram.elm arg1 arg2

OPTION:
  --debug   Do not optimize when compiling. This allows the Debug module in Elm
            Example: elm-cli run --debug src/MyProgram.elm arg1 arg2
`);
}

function printBugReport(msg) {
    console.error(`
You found a bug!
Please report at https://github.com:albertdahlin/elm-posix/issues

Copy the information below into the issue:

${msg}
`);
}

function compileProgram(args) {
    var elmJson = JSON.parse(fs.readFileSync(process.cwd() + '/elm.json').toString());
    var sourceDirectories = elmJson['source-directories'];
    var moduleName =
        args.src.split('/')
            .filter(part => part.match(/^[A-Z]/))
            .join('.')
            .replace(/\.elm$/, '');

    var sourceCode = wrapElmProgram(moduleName);
    var elmMain = tmpDir + '/elm-cli-' + process.pid;

    fs.writeFileSync(`${elmMain}.elm`, sourceCode);

    try {
        if (args.debug) {
            childProcess.execSync(`elm make --debug ${elmMain}.elm --output ${elmMain}.js`);
        } else {
            childProcess.execSync(`elm make --optimize ${elmMain}.elm --output ${elmMain}.js`);
        }
    } catch(e) {
        fs.unlinkSync(`${elmMain}.elm`);
        process.exit(255);
    }

    fs.unlinkSync(`${elmMain}.elm`);

    return `${elmMain}.js`;

}

function requireElmApp(args, jsFile) {
    var elmProgram = require(jsFile);
    var elmApp = elmProgram;

    while (true) {
        if (elmApp.init) {
            break;
        }
        elmApp = elmApp[Object.keys(elmApp)[0]];
    }

    return elmApp;
}

function wrapElmProgram(moduleName) {
    return `
port module Wrapper exposing (..)


import Json.Encode as Encode exposing (Value)
import ${moduleName} as Cli


type alias ArgsToJs =
    { fn : String
    , args : List Value
    }


port send : ArgsToJs -> Cmd msg
port recv : (Value -> msg) -> Sub msg

main =
    Cli.program recv send
`;
}

function wrapCliProgram(jsFile) {
    const elm = fs.readFileSync(jsFile).toString();

    return `#!/usr/bin/env node

const fs = require('fs');
const childProcess = require('child_process');
const readline = require('readline');
const os = require('os');
const tmpDir = os.tmpdir();


${elm}


var elmApp = this;

while (true) {
    if (elmApp.init) {
        break;
    }
    elmApp = elmApp[Object.keys(elmApp)[0]];
}

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});


const io = createIo(rl);
const flags = {
    argv: process.argv.slice(1),
    pid: process.pid,
    env: process.env
}
const app = elmApp.init({ flags: flags });

app.ports.send.subscribe(function(msg) {
    const fn = io[msg.fn];

    fn.apply(app.ports.recv, msg.args);
});

${createIoSource}
`;
}
