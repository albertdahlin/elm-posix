[{"name":"Posix.IO","comment":"\n\n\n# Create IO\n\nThe `IO err ok` type is very similar in concept to `Task err ok`. The first parameter is the error\nvalue, the second value is the \"return\" value of an IO-operation.\n\nA program must have the type `IO String ()`. The error parameter must have type `String`.\nThis  allows the runtime to print error message to std err in case of a problem.\n\n@docs IO, return, fail, none\n\n\n# Basic IO\n\n@docs print, printLn, sleep, randomSeed, exit\n\n\n# Transforming IO\n\n@docs map, andMap, andThen, and, combine\n\n\n# Handle Errors\n\n@docs mapError, recover\n\n\n# Tasks\n\n@docs performTask, attemptTask\n\n\n# Javascript Interop\n\n@docs callJs\n\n\n# Program\n\n@docs makeProgram, Process, PortIn, PortOut\n\n","unions":[],"aliases":[{"name":"IO","comment":" ","args":["err","ok"],"type":"Internal.ContWithResult.Cont Internal.Process.Proc err ok"},{"name":"PortIn","comment":" ","args":["msg"],"type":"Internal.Process.PortIn msg"},{"name":"PortOut","comment":" ","args":["msg"],"type":"Internal.Process.PortOut msg"},{"name":"Process","comment":" ","args":[],"type":"{ argv : List.List String.String, pid : Basics.Int, env : Dict.Dict String.String String.String }"}],"values":[{"name":"and","comment":" Instead of:\n\n    sleep 100\n        |> andThen (\\_ -> printLn \"Hello\")\n\n`and` allows you to do:\n\n    sleep 100\n        |> and (printLn \"Hello\")\n\n","type":"Posix.IO.IO x b -> Posix.IO.IO x a -> Posix.IO.IO x b"},{"name":"andMap","comment":" Applicative\n\n    map2 : (a -> b -> c) -> IO x a -> IO x b -> IO x c\n    map2 fn a b =\n        IO.return fn\n            |> IO.andMap a\n            |> IO.andMap b\n\n","type":"Posix.IO.IO x a -> Posix.IO.IO x (a -> b) -> Posix.IO.IO x b"},{"name":"andThen","comment":" ","type":"(a -> Posix.IO.IO x b) -> Posix.IO.IO x a -> Posix.IO.IO x b"},{"name":"attemptTask","comment":" Attempt a Task\n","type":"Task.Task err ok -> Posix.IO.IO err ok"},{"name":"callJs","comment":" Call a synchronous function in Javascript land.\n\nThis works by sending out a message through a port. The Javascript implementation\nwill then send the return value back through another port.\n```sh\ncallJs <fn> <args> <result decoder>\n```\n\n\n### Example\n\njs/my-functions.js\n\n```javascript\nmodule.exports = {\n    addOne: function(num) {\n        this.send(num + 1);\n    },\n}\n```\n\nsrc/MyModule.elm\n\n    addOne : Int -> IO x Int\n    addOne n =\n        IO.callJs\n            \"addOne\"\n            [ Encode.int n\n            ]\n            Decode.int\n\nRun like this:\n\n```sh\nelm.cli run --ext js/my-functions.js src/MyModule.elm\n```\n\n","type":"String.String -> List.List Json.Encode.Value -> Json.Decode.Decoder a -> Posix.IO.IO x a"},{"name":"combine","comment":" ","type":"List.List (Posix.IO.IO err ok) -> Posix.IO.IO err (List.List ok)"},{"name":"exit","comment":" Exit to shell with a status code\n","type":"Basics.Int -> Posix.IO.IO x ()"},{"name":"fail","comment":" ","type":"err -> Posix.IO.IO err a"},{"name":"makeProgram","comment":" Used by `elm-cli` to wrap your program.\n\nCreate your own program by defining `program` in your module.\n\n    program : Process -> IO String ()\n    program process =\n        printLn \"Hello, world!\"\n\n","type":"(Posix.IO.Process -> Posix.IO.IO String.String ()) -> Internal.Process.PosixProgram"},{"name":"map","comment":" ","type":"(a -> b) -> Posix.IO.IO x a -> Posix.IO.IO x b"},{"name":"mapError","comment":" ","type":"(x -> y) -> Posix.IO.IO x a -> Posix.IO.IO y a"},{"name":"none","comment":" ","type":"Posix.IO.IO x ()"},{"name":"performTask","comment":" Perform a task\n\n    getTime : IO x Time.Posix\n    getTime =\n        performTask Time.now\n\n","type":"Task.Task Basics.Never a -> Posix.IO.IO x a"},{"name":"print","comment":" ","type":"String.String -> Posix.IO.IO x ()"},{"name":"printLn","comment":" ","type":"String.String -> Posix.IO.IO x ()"},{"name":"randomSeed","comment":" Generate a seed than can be used with `Random.step` from elm/random.\nThis is a workaround for the `Random` module not supporting creating Tasks.\n\nUses NodeJs [crypto.randomBytes()](https://nodejs.org/dist/latest-v14.x/docs/api/crypto.html#crypto_crypto_randombytes_size_callback) to generate a 32bit seed.\n\n    roll : IO x Int\n    roll =\n        IO.randomSeed\n            |> IO.map\n                (Random.step (Random.int 1 6)\n                    |> Tuple.first\n                )\n\n","type":"Posix.IO.IO x Random.Seed"},{"name":"recover","comment":" ","type":"(err -> Posix.IO.IO x ok) -> Posix.IO.IO err ok -> Posix.IO.IO x ok"},{"name":"return","comment":" ","type":"a -> Posix.IO.IO err a"},{"name":"sleep","comment":" Sleep process execution in milliseconds.\n","type":"Basics.Float -> Posix.IO.IO x ()"}],"binops":[]},{"name":"Posix.IO.Directory","comment":"\n\n\n# Directory Entry\n\n@docs Path, Entry, resolve, absolutePath, fileType, FileType\n\n\n# File Stat\n\n@docs stat, Stat\n\n\n# Directory Contents\n\n@docs Pattern, list\n\n\n# Directory Operations\n\n@docs delete, copy, rename, symlink, mkdir\n\n\n# Permissions\n\n@docs Permission, Mask, setPermission, addPermission, removePermission\n\n","unions":[{"name":"Entry","comment":" ","args":[],"cases":[]},{"name":"FileType","comment":" ","args":[],"cases":[["BlockDevice",[]],["CharacterDevice",[]],["Dir",[]],["FIFO",[]],["File",[]],["Socket",[]],["SymbolicLink",[]]]}],"aliases":[{"name":"Mask","comment":" ","args":[],"type":"{ read : Basics.Bool, write : Basics.Bool, execute : Basics.Bool }"},{"name":"Path","comment":" ","args":[],"type":"String.String"},{"name":"Pattern","comment":" File name, dir, glob pattern etc.\n","args":[],"type":"String.String"},{"name":"Permission","comment":" ","args":[],"type":"{ owner : Posix.IO.Directory.Mask, group : Posix.IO.Directory.Mask, all : Posix.IO.Directory.Mask }"},{"name":"Stat","comment":" ","args":[],"type":"{ type_ : Posix.IO.Directory.FileType, mode : Posix.IO.Directory.Permission, owner : Basics.Int, group : Basics.Int, size : Basics.Int, lastAccessed : Time.Posix, lastModified : Time.Posix, lastStatusChanged : Time.Posix, createdAt : Time.Posix, absolutePath : Posix.IO.Directory.Path }"}],"values":[{"name":"absolutePath","comment":" ","type":"Posix.IO.Directory.Entry -> Posix.IO.Directory.Path"},{"name":"addPermission","comment":" ","type":"Posix.IO.Directory.Permission -> Posix.IO.Directory.Pattern -> Posix.IO.IO String.String ()"},{"name":"copy","comment":" ","type":"List.List Posix.IO.Directory.Pattern -> Posix.IO.Directory.Path -> Posix.IO.IO String.String ()"},{"name":"delete","comment":" ","type":"List.List Posix.IO.Directory.Pattern -> Posix.IO.IO String.String ()"},{"name":"fileType","comment":" ","type":"Posix.IO.Directory.Entry -> Posix.IO.Directory.FileType"},{"name":"list","comment":" ","type":"Posix.IO.Directory.Pattern -> Posix.IO.IO String.String (List.List Posix.IO.Directory.Entry)"},{"name":"mkdir","comment":" ","type":"Posix.IO.Directory.Path -> Posix.IO.IO String.String ()"},{"name":"removePermission","comment":" ","type":"Posix.IO.Directory.Permission -> Posix.IO.Directory.Pattern -> Posix.IO.IO String.String ()"},{"name":"rename","comment":" ","type":"Posix.IO.Directory.Pattern -> Posix.IO.Directory.Path -> Posix.IO.IO String.String ()"},{"name":"resolve","comment":" ","type":"Posix.IO.Directory.Path -> Posix.IO.IO String.String Posix.IO.Directory.Entry"},{"name":"setPermission","comment":" ","type":"Posix.IO.Directory.Permission -> Posix.IO.Directory.Pattern -> Posix.IO.IO String.String ()"},{"name":"stat","comment":" ","type":"Posix.IO.Directory.Entry -> Posix.IO.Directory.Stat"},{"name":"symlink","comment":" ","type":"Posix.IO.Directory.Path -> Posix.IO.Directory.Path -> Posix.IO.IO String.String ()"}],"binops":[]},{"name":"Posix.IO.File","comment":" File IO can fail for many reasons. If there is an IO problem you basically have two\noptions:\n\n  - Recover by handing the error case in your code.\n  - Exit the program and display an error message.\n\nTo make both these approaches ergonomic each function comes in two flavours. One fails\nwith a typed error, the other fails with an error message.\n\n@docs Filename\n\n\n# Read File\n\n@docs read, read_, ReadError\n\n\n# Write File\n\n@docs write, write_, WriteError\n\n\n## Write Options\n\n@docs Option, create, append, exclusive\n\n","unions":[{"name":"Option","comment":" ","args":[],"cases":[]},{"name":"ReadError","comment":" ","args":[],"cases":[["ReadFileNotFound",[]],["ReadNoPermission",[]],["ReadNotReadable",[]]]},{"name":"WriteError","comment":" ","args":[],"cases":[["WriteFileNotFound",[]],["WriteNoPermission",[]],["WriteNotExclusive",[]],["WriteNotWritable",[]]]}],"aliases":[{"name":"Filename","comment":" ","args":[],"type":"String.String"}],"values":[{"name":"append","comment":" Append data to file instead of overwriting it.\n","type":"Posix.IO.File.Option"},{"name":"create","comment":" Create file if it does not exist.\n","type":"Posix.IO.File.Option"},{"name":"exclusive","comment":" Exclusive write. Makes the write operation fail if the file already exists.\n","type":"Posix.IO.File.Option"},{"name":"read","comment":" ","type":"Posix.IO.File.Filename -> Posix.IO.IO String.String String.String"},{"name":"read_","comment":" ","type":"Posix.IO.File.Filename -> Posix.IO.IO Posix.IO.File.ReadError String.String"},{"name":"write","comment":" ","type":"List.List Posix.IO.File.Option -> Posix.IO.File.Filename -> String.String -> Posix.IO.IO String.String ()"},{"name":"write_","comment":" ","type":"List.List Posix.IO.File.Option -> Posix.IO.File.Filename -> String.String -> Posix.IO.IO Posix.IO.File.WriteError ()"}],"binops":[]}]