[{"name":"Posix.IO","comment":"\n\n\n# Create IO\n\n@docs IO, return, fail, none\n\n\n# Basic IO\n\n@docs print, printLn, sleep, randomSeed, exit\n\n\n# Transforming IO\n\n@docs map, andThen, and, combine\n\n\n# Handle Errors\n\n@docs mapError, recover\n\n\n# Low Level\n\n@docs performTask, attemptTask, callJs, ArgsToJs\n\n\n# Program\n\n@docs makeProgram, Process, PortIn, PortOut\n\n","unions":[],"aliases":[{"name":"ArgsToJs","comment":" ","args":[],"type":"{ fn : String.String, args : List.List Json.Encode.Value }"},{"name":"IO","comment":" ","args":["err","ok"],"type":"Internal.ContWithResult.Cont Internal.Process.Proc err ok"},{"name":"PortIn","comment":" ","args":["msg"],"type":"Internal.Process.PortIn msg"},{"name":"PortOut","comment":" ","args":["msg"],"type":"Internal.Process.PortOut msg"},{"name":"Process","comment":" ","args":[],"type":"{ argv : List.List String.String, pid : Basics.Int, env : Dict.Dict String.String String.String }"}],"values":[{"name":"and","comment":" Instead of:\n\n    sleep 100\n        |> andThen (\\_ -> printLn \"Hello\")\n\n`and` allows you to do:\n\n    sleep 100\n        |> and (printLn \"Hello\")\n","type":"Posix.IO.IO x b -> Posix.IO.IO x a -> Posix.IO.IO x b"},{"name":"andThen","comment":" ","type":"(a -> Posix.IO.IO x b) -> Posix.IO.IO x a -> Posix.IO.IO x b"},{"name":"attemptTask","comment":" Attempt a Task\n","type":"Task.Task err ok -> Posix.IO.IO err ok"},{"name":"callJs","comment":" Used internally for now.\n","type":"Posix.IO.ArgsToJs -> Json.Decode.Decoder a -> Posix.IO.IO x a"},{"name":"combine","comment":" ","type":"List.List (Posix.IO.IO err ok) -> Posix.IO.IO err (List.List ok)"},{"name":"exit","comment":" Exit to shell with a status code\n\n","type":"Basics.Int -> Posix.IO.IO x ()"},{"name":"fail","comment":" ","type":"err -> Posix.IO.IO err a"},{"name":"makeProgram","comment":" Used by `elm-cli` to wrap your program.\n\nCreate your own program by defining `program` in your module.\n\n    program : Process -> IO String ()\n    program process =\n        printLn \"Hello, world!\"\n\n","type":"(Posix.IO.Process -> Posix.IO.IO String.String ()) -> Internal.Process.PosixProgram"},{"name":"map","comment":" ","type":"(a -> b) -> Posix.IO.IO x a -> Posix.IO.IO x b"},{"name":"mapError","comment":" ","type":"(x -> y) -> Posix.IO.IO x a -> Posix.IO.IO y a"},{"name":"none","comment":" ","type":"Posix.IO.IO x ()"},{"name":"performTask","comment":" Perform a task\n\n    getTime : IO x Time.Posix\n    getTime =\n        performTask Time.now\n","type":"Task.Task Basics.Never a -> Posix.IO.IO x a"},{"name":"print","comment":" ","type":"String.String -> Posix.IO.IO x ()"},{"name":"printLn","comment":"\n","type":"String.String -> Posix.IO.IO x ()"},{"name":"randomSeed","comment":" Generate a seed than can be used with `Random.step` from elm/random.\nThis is a workaround for the `Random` module not supporting creating Tasks.\n\nUses NodeJs [crypto.randomBytes()](https://nodejs.org/dist/latest-v14.x/docs/api/crypto.html#crypto_crypto_randombytes_size_callback) to generate a 32bit seed.\n\n    roll : IO x Int\n    roll =\n        IO.randomSeed\n            |> IO.map\n                (Random.step (Random.int 1 6)\n                    |> Tuple.first\n                )\n\n","type":"Posix.IO.IO x Random.Seed"},{"name":"recover","comment":" ","type":"(err -> Posix.IO.IO x ok) -> Posix.IO.IO err ok -> Posix.IO.IO x ok"},{"name":"return","comment":" ","type":"a -> Posix.IO.IO err a"},{"name":"sleep","comment":" Sleep process execution in milliseconds.\n","type":"Basics.Float -> Posix.IO.IO x ()"}],"binops":[]}]